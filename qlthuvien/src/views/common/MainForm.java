/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package views.common;

import borrower.boundary.SearchBookForm;
import common.controller.BookController;
import common.controller.BookRelaController;
import entity.Book;
import function.entity.Function;
import function.controller.FunctionController;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Map;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import user.controller.BorrowerController;
import user.controller.LibrarianController;

/**
 * Lớp show màn hình chính
 *
 * @author Raph
 */
public class MainForm extends javax.swing.JFrame {

    private static String username = null;
    private boolean isChanged = false;
    private static int type = -1;
    
    public static int BORROWER_USERNAME = 1;
    public static int LIBARIAN_USERNAME = 2;

    /**
     * Creates new form MainForm
     */
    public MainForm() {
        initComponents();
        setLocationRelativeTo(null);
        loadingBook();
    }

    /**
     * Hàm cập nhật giao diện, cụ thể là menubar
     *
     * @param email : username người dùng
     */
    private void updateForm(String username) {
        this.username = username;
        this.setTitle(username);
        try {
            genMenuBar(FunctionController.getInstance().getFunctionsWithType(username));
            this.setJMenuBar(jMenuBar);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Lỗi xuất hiện khi kết nối với database", "Error!", JOptionPane.ERROR_MESSAGE);
        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(this, "Lỗi xuất hiện khi chạy: " + ex.toString(), "Error!", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Hàm quay trở về giao diện ban đầu (màn hình chính, chưa login)
     */
    private void returnSystemInterface() {
        setTitle("Library Management System");
        returnContentMain();

        // later, we update jPanel
        jMenuBar.removeAll();
        jMenuBar.repaint();
        jMenuBar.revalidate();

        jMenuCategory.add(jMenuItemCNTT);
        jMenuCategory.add(jMenuItemMath);
        jMenuCategory.add(jMenuItemChemistry);
        jMenuCategory.add(jMenuItemPhysic);
        jMenuCategory.add(jMenuItemNovel);
        jMenuCategory.add(jMenuItemLiterality);

        jMenuBar.add(jMenuCategory);
        jMenuBar.add(jMenuFindBook);
        jMenuBar.add(jMenuGoToMain);
        jMenuBar.add(jMenuRegister);

        jMenuBar.add(jMenuLogin);

        jMenuBar.repaint();
        jMenuBar.revalidate();
    }

    /**
     * Hàm quay trở về nội dung màn hình chính khi ấn Trở về màn hình chính từ
     * menubar
     */
    private void returnContentMain() {
        jPanel.removeAll();
        jPanel.repaint();
        jPanel.revalidate();
        loadingBook();
        jPanel.add(jPanelCommon);
        jPanel.add(jLabel2);
        jPanel.repaint();
        jPanel.revalidate();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel = new javax.swing.JPanel();
        jPanelCommon = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jMenuBar = new javax.swing.JMenuBar();
        jMenuCategory = new javax.swing.JMenu();
        jMenuItemCNTT = new javax.swing.JMenuItem();
        jMenuItemMath = new javax.swing.JMenuItem();
        jMenuItemChemistry = new javax.swing.JMenuItem();
        jMenuItemPhysic = new javax.swing.JMenuItem();
        jMenuItemNovel = new javax.swing.JMenuItem();
        jMenuItemLiterality = new javax.swing.JMenuItem();
        jMenuFindBook = new javax.swing.JMenu();
        jMenuGoToMain = new javax.swing.JMenu();
        jMenuRegister = new javax.swing.JMenu();
        jMenuLogin = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Library Management System");
        setAlwaysOnTop(true);
        setAutoRequestFocus(false);
        setMinimumSize(new java.awt.Dimension(980, 520));
        setName("mainFrame"); // NOI18N
        setResizable(false);
        setSize(new java.awt.Dimension(980, 520));
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });

        jPanel.setLayout(null);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã sách", "Tiêu đề", "Thể loại", "Tác giả", "Nhà phát hành", "ISBN"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Các cuốn sách tiêu biểu nằm trong thư viện");

        javax.swing.GroupLayout jPanelCommonLayout = new javax.swing.GroupLayout(jPanelCommon);
        jPanelCommon.setLayout(jPanelCommonLayout);
        jPanelCommonLayout.setHorizontalGroup(
            jPanelCommonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCommonLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelCommonLayout.createSequentialGroup()
                .addContainerGap(276, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(271, 271, 271))
        );
        jPanelCommonLayout.setVerticalGroup(
            jPanelCommonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCommonLayout.createSequentialGroup()
                .addGap(68, 68, 68)
                .addComponent(jLabel1)
                .addGap(35, 35, 35)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(79, Short.MAX_VALUE))
        );

        jPanel.add(jPanelCommon);
        jPanelCommon.setBounds(10, 51, 940, 410);

        jLabel2.setFont(new java.awt.Font("UTM Copperplate", 1, 24)); // NOI18N
        jLabel2.setText("Libary Management System");
        jPanel.add(jLabel2);
        jLabel2.setBounds(300, 10, 370, 30);

        jMenuCategory.setText("Danh mục sách");

        jMenuItemCNTT.setText("Kỹ thuật");
        jMenuCategory.add(jMenuItemCNTT);

        jMenuItemMath.setText("Toán học");
        jMenuCategory.add(jMenuItemMath);

        jMenuItemChemistry.setText("Hóa học");
        jMenuCategory.add(jMenuItemChemistry);

        jMenuItemPhysic.setText("Vật lý");
        jMenuCategory.add(jMenuItemPhysic);

        jMenuItemNovel.setText("Tiểu thuyết");
        jMenuCategory.add(jMenuItemNovel);

        jMenuItemLiterality.setText("Văn học");
        jMenuCategory.add(jMenuItemLiterality);

        jMenuBar.add(jMenuCategory);

        jMenuFindBook.setText("Tìm sách");
        jMenuFindBook.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMenuFindBookMousePressed(evt);
            }
        });
        jMenuBar.add(jMenuFindBook);

        jMenuGoToMain.setText("Trở về màn hình chính");
        jMenuGoToMain.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMenuGoToMainMousePressed(evt);
            }
        });
        jMenuBar.add(jMenuGoToMain);

        jMenuRegister.setText("Đăng ký");
        jMenuRegister.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMenuRegisterMousePressed(evt);
            }
        });
        jMenuBar.add(jMenuRegister);

        jMenuLogin.setText("Đăng nhập");
        jMenuLogin.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMenuLoginMousePressed(evt);
            }
        });
        jMenuBar.add(jMenuLogin);

        setJMenuBar(jMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 960, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 479, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Giao diện main lấy lại focus
     *
     * @param evt : sự kiện
     */
    private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus
        // TODO add your handling code here:
        if (username != null && !isChanged) {
            jMenuBar.removeAll();
            updateForm(username);
            try {
                if(BorrowerController.getInstance().checkBorrower(username)){
                    type = BORROWER_USERNAME;
                } else if (LibrarianController.getInstance().checkLibrarian(username)){
                    type = LIBARIAN_USERNAME;
                } else 
                    type = -1;
            } catch (ClassNotFoundException | SQLException ex) {
                Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
            }
            validate();
            isChanged = true;
        }
    }//GEN-LAST:event_formWindowGainedFocus

    private void jMenuLoginMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuLoginMousePressed
        // TODO add your handling code here:
        LoginForm loginForm = new LoginForm(new javax.swing.JFrame(), true);
        loginForm.setVisible(true);
        username = loginForm.login();
    }//GEN-LAST:event_jMenuLoginMousePressed

    private void jMenuGoToMainMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuGoToMainMousePressed
        // TODO add your handling code here:
        returnContentMain();
    }//GEN-LAST:event_jMenuGoToMainMousePressed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        int row = jTable1.getSelectedRow();
        if(row < 0){
            System.out.println("Loading table not done yet");
            return;
        }
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        String bookId = model.getValueAt(row, 0).toString();
        String bookName = model.getValueAt(row, 1).toString();
        String category = model.getValueAt(row, 2).toString();
        String author = model.getValueAt(row, 3).toString();
        String publisher = model.getValueAt(row, 4).toString();
        String isbn = model.getValueAt(row, 5).toString();

        JPanel detailsPanel = new BookDetailForm(bookId, bookName, category, author, publisher, isbn, type);
        detailsPanel.setBounds(20, 0, 900, 465);

        jPanel.removeAll();
        jPanel.repaint();
        jPanel.revalidate();
        jPanel.add(detailsPanel);
        jPanel.repaint();
        jPanel.revalidate();

    }//GEN-LAST:event_jTable1MouseClicked

    private void jMenuFindBookMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuFindBookMousePressed
        // TODO add your handling code here:
        SearchBookForm searchForm = new SearchBookForm();
        searchForm.setBounds(20, 0, 900, 465);

        jPanel.removeAll();
        jPanel.repaint();
        jPanel.revalidate();
        jPanel.add(searchForm);
        jPanel.repaint();
        jPanel.revalidate();
    }//GEN-LAST:event_jMenuFindBookMousePressed

    private void jMenuRegisterMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuRegisterMousePressed
        // TODO add your handling code here:
        RegisterForm registerForm = new RegisterForm(new javax.swing.JFrame(), true);
        registerForm.setVisible(true);
    }//GEN-LAST:event_jMenuRegisterMousePressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new MainForm().setVisible(true);
        });
    }

    /**
     * Generate nội dung menubar theo csdl
     *
     * @param typeFunctionMap : một hashmap đối chiếu key (1 chuỗi trong csdl)
     * và kết quả (1 danh sách chức năng)
     */
    public void genMenuBar(Map<String, ArrayList<Function>> typeFunctionMap) {
        jMenuBar.removeAll();
        jMenuBar.repaint();
        jMenuBar.revalidate();

        JMenu menu;
        JMenuItem menuItem;
        for (String key : typeFunctionMap.keySet()) {
            menu = new JMenu(key);
            ArrayList<Function> functions = typeFunctionMap.get(key);
            for (Function function : functions) {
                menuItem = new JMenuItem(function.getFunctionName());
                menuItem.addActionListener((ActionEvent e) -> {
                    JPanel newPanel = null;
                    if (function.getBoundaryClass().equals("function")) {
                        return;
                    } else {
                        System.out.println("AAAAA");
                        try {
                            newPanel = (JPanel) Class.forName(function.getBoundaryClass()).newInstance();
                            newPanel.setBounds(20, 0, 900, 465);
                        } catch (ClassNotFoundException ex) {
                            JOptionPane.showMessageDialog(null, function.getBoundaryClass() + " not found.");
                        } catch (InstantiationException | IllegalAccessException ex) {
                            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }

                    newPanel.setVisible(true);
                    jPanel.removeAll();
                    jPanel.repaint();
                    jPanel.revalidate();
                    jPanel.add(newPanel);
                    jPanel.repaint();
                    jPanel.revalidate();
                });
                menu.add(menuItem);
            }

            jMenuBar.add(menu);

        }

        // create new menu Escapse
        JMenu jMenuEscapse = new JMenu("Đăng xuất");
        jMenuEscapse.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int choice = JOptionPane.showConfirmDialog(MainForm.this, "Đăng xuất khỏi LMS", "Logout", JOptionPane.YES_NO_OPTION);
                if (choice == JOptionPane.YES_OPTION) {
                    MainForm.this.username = null;
                    MainForm.this.isChanged = false;
                    MainForm.this.type = -1;
                    MainForm.this.returnSystemInterface();
                    MainForm.this.setTitle("Library Management System");
                }
            }

            @Override
            public void mousePressed(MouseEvent e) {

            }

            @Override
            public void mouseReleased(MouseEvent e) {

            }

            @Override
            public void mouseEntered(MouseEvent e) {

            }

            @Override
            public void mouseExited(MouseEvent e) {

            }
        });

        jMenuBar.add(jMenuFindBook);
        jMenuBar.add(jMenuGoToMain);
        jMenuBar.add(jMenuEscapse);
    }

    /**
     * Hàm load các cuốn sách từ csdl đổ vào bảng
     */
    private void loadingBook() {

        ArrayList<Book> books = new ArrayList<>();
        try {
            books = BookController.getInstance().loadBook();

            Vector<String> row;

            if (!books.isEmpty()) {
                DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                model.setRowCount(0);
                for (Book book : books) {
                    row = new Vector<>();
                    row.add(book.getBookId());
                    row.add(book.getNameOfBook());
                    try {
                        row.add(BookRelaController.getInstance().getCategoryByID(book.getCategoryID()));
                        row.add(book.getAuthor());
                        row.add(BookRelaController.getInstance().getPublisherByID(book.getPublisherID()));
                    } catch (ClassNotFoundException | SQLException ex) {
                        Logger.getLogger(SearchBookForm.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    row.add(book.getIsbn());
                    model.addRow(row);
                }
                
                adjustColumnSize(jTable1);
            }
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
    
    /**
     * Hàm thay đổi kích thước cột theo content
     * @param table : bảng
     */
    private void adjustColumnSize(javax.swing.JTable table) {
        for (int column = 0; column < table.getColumnCount(); column++) {
            TableColumn tableColumn = table.getColumnModel().getColumn(column);
            int preferredWidth = tableColumn.getMinWidth();
            int maxWidth = tableColumn.getMaxWidth();

            for (int row = 0; row < table.getRowCount(); row++) {
                TableCellRenderer cellRenderer = table.getCellRenderer(row, column);
                Component c = table.prepareRenderer(cellRenderer, row, column);
                int width = c.getPreferredSize().width + table.getIntercellSpacing().width;
                preferredWidth = Math.max(preferredWidth, width);

                if (preferredWidth >= maxWidth) {
                    preferredWidth = maxWidth;
                    break;
                }
            }

            tableColumn.setPreferredWidth(preferredWidth);
        }
    }

    public static String getUsername() {
        return username;
    }
    
    public static int getTypeUser(){
        return type;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenuBar jMenuBar;
    private javax.swing.JMenu jMenuCategory;
    private javax.swing.JMenu jMenuFindBook;
    private javax.swing.JMenu jMenuGoToMain;
    private javax.swing.JMenuItem jMenuItemCNTT;
    private javax.swing.JMenuItem jMenuItemChemistry;
    private javax.swing.JMenuItem jMenuItemLiterality;
    private javax.swing.JMenuItem jMenuItemMath;
    private javax.swing.JMenuItem jMenuItemNovel;
    private javax.swing.JMenuItem jMenuItemPhysic;
    private javax.swing.JMenu jMenuLogin;
    private javax.swing.JMenu jMenuRegister;
    private javax.swing.JPanel jPanel;
    private javax.swing.JPanel jPanelCommon;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
