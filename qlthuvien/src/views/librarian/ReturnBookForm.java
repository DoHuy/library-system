/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package views.librarian;

import common.controller.BookController;
import common.controller.BookRelaController;
import common.controller.CardController;
import common.controller.TaskController;
import entity.Book;
import entity.BorrowedInfo;
import entity.Borrower;
import entity.Card;
import entity.Copy;
import entity.RegistrationInfo;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import user.controller.BorrowerController;

/**
 * Lớp bao thực hiện trả sách (tác nhân sử dụng: thủ thư)
 *
 * @author Raph
 */
public class ReturnBookForm extends javax.swing.JPanel {

    /**
     * Creates new form ReturnBookForm
     */
    public ReturnBookForm() {
        initComponents();
        jLabelAlert.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jTextFieldCardId = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jButtonSearch = new javax.swing.JButton();
        jLabelAlert = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabelName = new javax.swing.JLabel();
        jLabelGender = new javax.swing.JLabel();
        jLabelEmail = new javax.swing.JLabel();
        jLabelContact = new javax.swing.JLabel();
        jLabelId = new javax.swing.JLabel();
        jLabelPeriod = new javax.swing.JLabel();
        jLabelDeposit = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFocusGained(evt);
            }
        });

        jTextFieldCardId.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldCardIdKeyTyped(evt);
            }
        });

        jLabel1.setText("Nhập mã thẻ mượn");

        jButtonSearch.setText("OK");
        jButtonSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchActionPerformed(evt);
            }
        });

        jLabelAlert.setForeground(new java.awt.Color(255, 0, 0));
        jLabelAlert.setText("jLabel2");

        jLabel2.setText("Tên người mượn:");

        jLabel3.setText("Giới tính:");

        jLabel4.setText("Email:");

        jLabel5.setText("MSSV (nếu có):");

        jLabel6.setText("Giai đoạn học:");

        jLabel7.setText("Liên hệ:");

        jLabel8.setText("Số tiền cọc:");

        jLabel9.setText("Danh sách mượn");

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã sách", "Mã số bản sao", "STT", "Tiêu đề", "Thể loại", "Tác giả", "NPH", "Trạng thái", "TG mượn", "Giá", "Quá hạn"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Double.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable2.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable2MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable2);

        jLabelName.setText("null");

        jLabelGender.setText("null");

        jLabelEmail.setText("null");

        jLabelContact.setText("null");

        jLabelId.setText("null");

        jLabelPeriod.setText("null");

        jLabelDeposit.setText("null");

        jLabel10.setFont(new java.awt.Font("UTM Copperplate", 1, 24)); // NOI18N
        jLabel10.setText("Trả sách");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jTextFieldCardId, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(52, 52, 52)
                                        .addComponent(jButtonSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel2)
                                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING))
                                        .addGap(39, 39, 39)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabelEmail)
                                            .addComponent(jLabelGender)
                                            .addComponent(jLabelName)
                                            .addComponent(jLabelContact))))
                                .addGap(74, 74, 74)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabelAlert)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel8)
                                            .addComponent(jLabel6)
                                            .addComponent(jLabel5))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(34, 34, 34)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabelId)
                                                    .addComponent(jLabelPeriod)))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(37, 37, 37)
                                                .addComponent(jLabelDeposit))))))
                            .addComponent(jLabel9))
                        .addGap(0, 301, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(388, 388, 388)
                .addComponent(jLabel10)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldCardId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSearch)
                    .addComponent(jLabelAlert))
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel5)
                    .addComponent(jLabelName)
                    .addComponent(jLabelId))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel6)
                    .addComponent(jLabelGender)
                    .addComponent(jLabelPeriod))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel8)
                    .addComponent(jLabelEmail)
                    .addComponent(jLabelDeposit))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jLabelContact))
                .addGap(36, 36, 36)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchActionPerformed
        // TODO add your handling code here:
        update();

        String cardValue = jTextFieldCardId.getText();      // xem lại định dạng input
        if (Card.validateCardId(cardValue)) {
            JOptionPane.showMessageDialog(this, "Định dạng mã thẻ không chính xác", "Cảnh báo", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (cardValue.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Ô tìm kiếm trống", "Cảnh báo", JOptionPane.WARNING_MESSAGE);
        } else {
            cardId = Integer.valueOf(cardValue);
            try {
                if (!CardController.getInstance().checkCard(cardId)) {
                    jLabelAlert.setText("Không tồn tại mã thẻ");
                    jLabelAlert.setVisible(true);
                } else {
                    int cardStatus = CardController.getInstance().getCardStatus(cardId);
                    switch (cardStatus) {
                        case Card.EXPIRED:
                            jLabelAlert.setText("Thẻ này quá hạn sử dụng");
                            jLabelAlert.setVisible(true);
                            break;
                        case Card.ACTIVE:
                            borrowerId = CardController.getInstance().getBorrowerIdById(cardId);
                            if (borrowerId != Card.CARD_FREE) {
                                configLabel(borrowerId);  // find borrower over cardID
                                configTable(cardId);  // find registraton info
                            } else {
                                jLabelAlert.setText("Thẻ này chưa được kích hoạt");
                                jLabelAlert.setVisible(true);
                            }
                            break;
                        default:
                            jLabelAlert.setText("Thẻ này bị hủy khả dụng");
                            jLabelAlert.setVisible(true);
                            break;
                    }

                }
            } catch (ClassNotFoundException | SQLException ex) {
                Logger.getLogger(LentForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButtonSearchActionPerformed

    private void jTextFieldCardIdKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldCardIdKeyTyped
        // TODO add your handling code here:
        jLabelAlert.setVisible(false);
    }//GEN-LAST:event_jTextFieldCardIdKeyTyped

    private void jTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseClicked
        // TODO add your handling code here:
        
        int row = jTable2.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
        String bookId = model.getValueAt(row, 0).toString();
        String copyId = model.getValueAt(row, 1).toString();
        String bookName = model.getValueAt(row, 3).toString();
        double price = (Double) model.getValueAt(row, 9);
        String borrowerName = jLabelName.getText();
        
        ReturnDescriptionForm returnDesForm = new ReturnDescriptionForm(new javax.swing.JFrame(), true, bookId, copyId, bookName, price, borrowerId, borrowerName, listBorrowedInforId.get(row), listNotExpired.get(row));
        returnDesForm.setVisible(true);
        if(returnDesForm.hitOK()){
            this.requestFocus();
        }
        
    }//GEN-LAST:event_jTable2MouseClicked

    // Panel lấy lại focus
    private void formFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusGained
        try {
            // TODO add your handling code here:
            DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
            model.setRowCount(0);
            configTable(cardId);
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(ReturnBookForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formFocusGained

    /**
     * Hàm cấu hình lable hiển thị
     *
     * @param borrowerId : mã người mượn
     * @throws ClassNotFoundException
     * @throws SQLException
     */
    private void configLabel(int borrowerId) throws ClassNotFoundException, SQLException {
        Borrower borrower = BorrowerController.getInstance().getBorrowerInfor(borrowerId);
        jLabelName.setText(borrower.getName());
        jLabelGender.setText(borrower.isIsFemale() ? "Nữ" : "Nam");
        jLabelEmail.setText(borrower.getEmail());
        jLabelContact.setText(borrower.getContact());
        jLabelId.setText(borrower.getStudentId());
        jLabelPeriod.setText(borrower.getPeriod());
        jLabelDeposit.setText(String.valueOf(borrower.getDeposit()));
    }

    /**
     * Hàm cấu hình bảng để hiển thị các thông tin cần thiết
     *
     * @param cardId : mã thẻ
     * @throws ClassNotFoundException
     * @throws SQLException
     */
    private void configTable(int cardId) throws ClassNotFoundException, SQLException {
        listBorrowedInforId.clear();
        listNotExpired.clear();
        
        ArrayList<BorrowedInfo> listBorrowedInfo = new ArrayList<>();
        Vector<Object> row;

        listBorrowedInfo = TaskController.getInstance().findBorrowedInfoOverCardId(cardId);
        if (!listBorrowedInfo.isEmpty()) {
            DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
            model.setRowCount(0);

            for (BorrowedInfo b : listBorrowedInfo) {
                row = new Vector<>();
                
                listBorrowedInforId.add(b.getBorrowedInfoId());
                int registId = b.getRegistrationInfoId();
                Date borrowedDate = b.getBorrowedDate();    // gotcha
                Date repaymentDate = b.getRepaymentDate();  // gotcha
                Date currentDate = new Date(System.currentTimeMillis());

                boolean isNotExpired = true;
                if (repaymentDate.after(currentDate)) {
                    isNotExpired = false;
                }
                
                listNotExpired.add(!isNotExpired);

                RegistrationInfo registInfo = TaskController.getInstance().getRegisterInfor(registId);
                String copyId = registInfo.getCopyId();         // gotcha

                Copy copy = BookController.getInstance().searchCopyInforById(copyId);
                int orderNumber = copy.getOrderNumber();
                String copyStatus = translateCopyStatus(copy.getStatus());
                String bookId = copy.getBookId();
                double price = copy.getPrice();

                Book book = BookController.getInstance().getBookInfor(bookId);
                String bookName = book.getNameOfBook();
                int categoryID = book.getCategoryID();
                String category = BookRelaController.getInstance().getCategoryByID(categoryID);
                int publisherID = book.getPublisherID();
                String publisher = BookRelaController.getInstance().getPublisherByID(publisherID);
                String author = book.getAuthor();

                row.add(bookId);
                row.add(copyId);
                row.add(orderNumber);
                row.add(bookName);
                row.add(category);
                row.add(author);
                row.add(publisher);
                row.add(copyStatus);
                row.add(borrowedDate);
                row.add(price);
                row.add(isNotExpired);

                model.addRow(row);

            }
            
        }
    }

    /**
     * Hàm chuyển đổi trạng thái (trong csdl là kiểu int) sang kiểu chuỗi
     *
     * @param status : trạng thái
     * @return String : chuỗi
     */
    private String translateCopyStatus(int status) {
        String s = null;
        switch (status) {
            case Copy.AVAILABLE:
                s = "Available";
                break;
            case Copy.PENDING:
                s = "Pending";
                break;
            case Copy.BORROWED:
                s = "Borrowed";
                break;
            case Copy.LENT:
                s = "Lent";
                break;
        }

        return s;
    }
    
    /**
     * Hàm này update dữ liệu sau mỗi lần tìm kiếm
     */
    private void update(){
        DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
        model.setRowCount(0);
        
        jLabelName.setText("null");
        jLabelGender.setText("null");
        jLabelEmail.setText("null");
        jLabelContact.setText("null");
        jLabelId.setText("null");
        jLabelPeriod.setText("null");
        jLabelDeposit.setText("null");
    }
    
    
    private int borrowerId, cardId;
    private final ArrayList<Boolean> listNotExpired = new ArrayList<>();
    private final ArrayList<Integer> listBorrowedInforId = new ArrayList<>();
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonSearch;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelAlert;
    private javax.swing.JLabel jLabelContact;
    private javax.swing.JLabel jLabelDeposit;
    private javax.swing.JLabel jLabelEmail;
    private javax.swing.JLabel jLabelGender;
    private javax.swing.JLabel jLabelId;
    private javax.swing.JLabel jLabelName;
    private javax.swing.JLabel jLabelPeriod;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField jTextFieldCardId;
    // End of variables declaration//GEN-END:variables
}
