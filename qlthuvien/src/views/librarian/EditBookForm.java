/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package views.librarian;

import common.controller.BookController;
import common.controller.BookRelaController;
import entity.Book;
import entity.Category;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;

/**
 * Lớp bao dùng để cập nhật sách
 * @author Raph
 */

public class EditBookForm extends javax.swing.JDialog {

    /**
     * Creates new form EditBookForm
     *
     * @param parent
     * @param modal
     * @param bookId
     * @param name
     * @param category
     * @param author
     * @param publisher
     * @param isbn
     */
    
    public EditBookForm(java.awt.Frame parent, boolean modal, String bookId, String name, String category, String author, String publisher, String isbn) {
        super(parent, modal);
        initComponents();
        setTitle("Chỉnh sửa");
        setLocationRelativeTo(null);
        this.bookId = bookId;
        loadCategory(category);
        config(name, author, publisher, isbn);
        loadPrevousAuthor(author);
        jLabelAlert.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jComboBoxCategory = new javax.swing.JComboBox<>();
        jTextFieldName = new javax.swing.JTextField();
        jTextFieldAuthor = new javax.swing.JTextField();
        jTextFieldPublisher = new javax.swing.JTextField();
        jTextFieldISBN = new javax.swing.JTextField();
        jButtonCancel = new javax.swing.JButton();
        jButtonOK = new javax.swing.JButton();
        jLabelAlert = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setAlwaysOnTop(true);

        jLabel1.setText("Tiêu đề:");

        jLabel2.setText("Thể loại:");

        jLabel3.setText("Tác giả:");

        jLabel4.setText("Nhà xuất bản:");

        jLabel5.setText("ISBN:");

        jTextFieldName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldNameKeyTyped(evt);
            }
        });

        jTextFieldAuthor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldAuthorKeyTyped(evt);
            }
        });

        jTextFieldPublisher.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldPublisherKeyTyped(evt);
            }
        });

        jTextFieldISBN.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldISBNKeyTyped(evt);
            }
        });

        jButtonCancel.setText("Hủy");
        jButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelActionPerformed(evt);
            }
        });

        jButtonOK.setText("Hoàn tất");
        jButtonOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOKActionPerformed(evt);
            }
        });

        jLabelAlert.setForeground(new java.awt.Color(255, 0, 51));
        jLabelAlert.setText("jLabel6");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(74, 74, 74)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addGap(58, 58, 58)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelAlert)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jComboBoxCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextFieldName)
                        .addComponent(jTextFieldAuthor)
                        .addComponent(jTextFieldPublisher)
                        .addComponent(jTextFieldISBN)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jButtonCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 61, Short.MAX_VALUE)
                            .addComponent(jButtonOK))))
                .addContainerGap(145, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(jTextFieldName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jComboBoxCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextFieldAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jTextFieldPublisher, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jTextFieldISBN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabelAlert)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonCancel)
                    .addComponent(jButtonOK))
                .addGap(39, 39, 39))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jButtonCancelActionPerformed

    private void jTextFieldNameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldNameKeyTyped
        // TODO add your handling code here:
        jLabelAlert.setVisible(false);
    }//GEN-LAST:event_jTextFieldNameKeyTyped

    private void jTextFieldAuthorKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldAuthorKeyTyped
        // TODO add your handling code here:
        jLabelAlert.setVisible(false);
    }//GEN-LAST:event_jTextFieldAuthorKeyTyped

    private void jTextFieldPublisherKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldPublisherKeyTyped
        // TODO add your handling code here:
        jLabelAlert.setVisible(false);
    }//GEN-LAST:event_jTextFieldPublisherKeyTyped

    private void jTextFieldISBNKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldISBNKeyTyped
        // TODO add your handling code here:
        jLabelAlert.setVisible(false);
    }//GEN-LAST:event_jTextFieldISBNKeyTyped

    private void jButtonOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOKActionPerformed
        // TODO add your handling code here:
        if (check()) {
            action();
        }
    }//GEN-LAST:event_jButtonOKActionPerformed

    /**
     * load thể loại từ csdl và đặt theo thể loại của sách
     */
    private void loadCategory(String category) {
        try {
            list = BookRelaController.getInstance().loadCategory();
            DefaultComboBoxModel model = (DefaultComboBoxModel) jComboBoxCategory.getModel();
            list.stream().forEach((c) -> {
                model.addElement(c.getCategory_name());
                if (category.equalsIgnoreCase(c.getCategory_name())) {
                    model.setSelectedItem(c.getCategory_name());
                }
            });
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(AddBookForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * Hàm cấu hình ô nhập
     * @param name : tên sách
     * @param author : tác giả
     * @param publisher : nhà phát hành
     * @param isbn : isbn
     */
    private void config(String name, String author, String publisher, String isbn) {
        jTextFieldName.setText(name);
        jTextFieldAuthor.setText(author);
        jTextFieldPublisher.setText(publisher);
        jTextFieldISBN.setText(isbn);
    }

    /**
     * Hàm load các tác giả ban đầu
     * @param previousAuthor : chuỗi tác giả
     */
    private void loadPrevousAuthor(String previousAuthor) {
        String listAuthor[] = previousAuthor.split(",");
        for (String s : listAuthor) {
            listPreviousAuthor.add(s.trim());
        }
    }

    /**
     * Hàm check các ô nhập
     * @return true nếu ok, ngược lại false
     */
    private boolean check() {
        String bookName = jTextFieldName.getText();
        String author = jTextFieldAuthor.getText();
        String publisher = jTextFieldPublisher.getText();
        String isbn = jTextFieldISBN.getText();

        if (bookName.isEmpty()) {
            jLabelAlert.setText("Tên sách trống");
            jLabelAlert.setVisible(true);
            return false;
        } else if (author.isEmpty()) {
            jLabelAlert.setText("Tác giả trống");
            jLabelAlert.setVisible(true);
            return false;
        } else if (publisher.isEmpty()) {
            jLabelAlert.setText("Nhà phát hành trống");
            jLabelAlert.setVisible(true);
            return false;
        } else if (isbn.isEmpty()) {
            jLabelAlert.setText("ISBN trống");
            jLabelAlert.setVisible(true);
            return false;
        } else if (isbn.toCharArray().length != 7) {
            jLabelAlert.setText("ISBN không đủ 7 ký tự");
            jLabelAlert.setVisible(true);
            return false;
        } else {
            return true;
        }
    }

    /**
     * Hàm thao tác thực hiện cập nhật
     */
    private void action() {

        // delete all
        listPreviousAuthor.stream().forEach((pre) -> {
            try {
                int authorId = BookRelaController.getInstance().getAuthorId(pre);
                BookRelaController.getInstance().delAuthorHasBook(authorId, bookId);
            } catch (ClassNotFoundException | SQLException ex) {
                Logger.getLogger(EditBookForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        });

        int index = jComboBoxCategory.getSelectedIndex();
        int categoryId = list.get(index).getCategory_id();

        newAuthor.clear();

        String bookName = jTextFieldName.getText();
        String author = jTextFieldAuthor.getText();
        String publisher = jTextFieldPublisher.getText();
        String isbn = jTextFieldISBN.getText();

        try {

            String listAuthor[] = author.split(",");
            for (String s : listAuthor) {
                String authorValue = BookRelaController.getInstance().checkAuthor(s.trim());
                if (authorValue != null) {
                    existAuthor.add(authorValue);
                    System.out.println("Exist");

                } else {
                    newAuthor.add(s.trim());        // nếu chưa có thì tạo ms tác giả và tạo mới tác giả có sách
                    System.out.println("New one");
                }
            }

            for (String newA : newAuthor) {
                BookRelaController.getInstance().addNewAuthor(newA);
                existAuthor.add(newA);
            }

            String publisherValue = BookRelaController.getInstance().checkPublisher(publisher);
            int publisherId;
            if (publisherValue != null) {       // nếu tồn tại thì lấy mã
                publisherId = BookRelaController.getInstance().getPubliserId(publisherValue);
            } else {
                // tạo mới và lấy mã
                BookRelaController.getInstance().addNewPublisher(publisher);
                publisherId = BookRelaController.getInstance().getPubliserId(publisher);
            }

            // tạo mới tác giả có sách
            for (String exist : existAuthor) {
                int authorId = BookRelaController.getInstance().getAuthorId(exist);
                BookRelaController.getInstance().addNewAuthorHasBook(authorId, bookId);
            }

            Book modifiedBook = new Book(bookId, bookName, categoryId, publisherId, isbn);
            BookController.getInstance().updateBook(modifiedBook);

            JOptionPane.showMessageDialog(this, "Sửa sách thành công", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
            this.dispose();
            isHitOK = true;

        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(AddBookForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * Hàm lấy giá trị hitOk
     * @return true nếu đã ấn OK, false ngược lại
     */
    public boolean isHitOK() {
        return isHitOK;
    }

    /**
     * Hàm lấy giá trị trong ô tên sách
     * @return 
     */
    public String getTFName() {
        return jTextFieldName.getText();
    }

    /**
     * Hàm lấy giá trị trong comboBox
     * @return 
     */
    public String getCategoryName() {
        return list.get(jComboBoxCategory.getSelectedIndex()).getCategory_name();
    }

    /**
     * Hàm lấy giá trị trong ô tác giả
     * @return 
     */
    public String getAuthorValue() {
        return jTextFieldAuthor.getText();
    }

    /**
     * Hàm lấy giá trị trong ô nhà phát hành
     * @return 
     */
    public String getPublisherValue() {
        return jTextFieldPublisher.getText();
    }

    /**
     * Hàm lấy giá trị trong ô ISBN
     * @return 
     */
    public String getISBNValue() {
        return jTextFieldISBN.getText();
    }

    private final String bookId;
    private ArrayList<Category> list = new ArrayList<>();
    private ArrayList<String> newAuthor = new ArrayList<>();
    private ArrayList<String> existAuthor = new ArrayList<>();
    private ArrayList<String> listPreviousAuthor = new ArrayList<>();
    private boolean isHitOK = false;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonOK;
    private javax.swing.JComboBox<String> jComboBoxCategory;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabelAlert;
    private javax.swing.JTextField jTextFieldAuthor;
    private javax.swing.JTextField jTextFieldISBN;
    private javax.swing.JTextField jTextFieldName;
    private javax.swing.JTextField jTextFieldPublisher;
    // End of variables declaration//GEN-END:variables
}
